"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
"""

import logging
from functools import wraps
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

def require_test_completion(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from src.bot.keyboards import create_main_keyboard
        
        user_id = update.effective_user.id
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
            from src.test_manager import test_manager
            if user_id in test_manager.active_tests:
                message_text = """‚è∏Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç!
                
–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Ç–µ—Å—Ç—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìù Test'"""
                await update.message.reply_text(message_text, reply_markup=create_main_keyboard())
                return None
        except:
            pass
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            from src.database.manager import database_manager
            if not database_manager.has_completed_test(user_id):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ
                import json
                from pathlib import Path
                test_file = Path(f"data/tests/user_{user_id}.json")
                
                if test_file.exists():
                    try:
                        with open(test_file, 'r', encoding='utf-8') as f:
                            test_results = json.load(f)
                        if test_results and len(test_results) > 0:
                            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤, –Ω–æ —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                            logger.info(f"Auto-fixing test completion flag for user {user_id}")
                            database_manager.mark_test_completed(user_id)
                        else:
                            message_text = """üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!
                            
–ù–∞–∂–º–∏—Ç–µ 'üìù Test' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
                            await update.message.reply_text(message_text, reply_markup=create_main_keyboard())
                            return None
                    except Exception as file_error:
                        logger.error(f"Error reading test file for user {user_id}: {file_error}")
                        message_text = """üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!
                        
–ù–∞–∂–º–∏—Ç–µ 'üìù Test' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
                        await update.message.reply_text(message_text, reply_markup=create_main_keyboard())
                        return None
                else:
                    message_text = """üìù –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç!
                    
–ù–∞–∂–º–∏—Ç–µ 'üìù Test' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"""
                    await update.message.reply_text(message_text, reply_markup=create_main_keyboard())
                    return None
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.error(f"Error checking test completion for user {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            pass
        
        return await func(update, context, *args, **kwargs)
    return wrapper