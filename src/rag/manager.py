"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä RAG –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

import json
import logging
from pathlib import Path
from typing import Dict, Optional
from src.llm.service import llm_service

logger = logging.getLogger(__name__)

class SimpleRAGManager:
    def __init__(self):
        self.user_profiles: Dict[int, dict] = {}
    
    def load_user_profile(self, user_id: int) -> Optional[dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è RAG"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_path = Path(f"data/users/{user_id}.json")
            if user_path.exists():
                with open(user_path, 'r', encoding='utf-8') as f:
                    user_data = json.load(f)
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                profile = {
                    'user_id': user_data.get('user_id'),
                    'test_results': user_data.get('test_results', []),
                    'stats': user_data.get('stats', {}),
                    'weaknesses': [],
                    'error_patterns': {}
                }
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                test_path = Path(f"data/tests/user_{user_id}.json")
                if test_path.exists():
                    with open(test_path, 'r', encoding='utf-8') as f:
                        test_results = json.load(f)
                    profile['test_results'] = test_results
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ —Ç–µ–º–∞–º –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
                    if test_results:
                        latest_test = test_results[-1]
                        profile['weaknesses'] = latest_test.get('weaknesses', [])
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º, –µ—Å–ª–∏ –µ—Å—Ç—å
                        profile['topic_stats'] = latest_test.get('topic_stats', {})
                        
                        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º –∏ —Ä–∞–∑–¥–µ–ª–∞–º
                        error_patterns = {}
                        for answer in latest_test.get('answers', []):
                            if not answer.get('is_correct'):
                                topic = answer.get('topic') or answer.get('section', 'unknown')
                                if topic not in error_patterns:
                                    error_patterns[topic] = []
                                error_patterns[topic].append(answer.get('correct_answer', ''))
                        profile['error_patterns'] = error_patterns
                
                return profile
                
        except Exception as e:
            logger.error(f"Error loading user profile {user_id}: {e}")
        return None
    
    def create_user_context(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        profile = self.load_user_profile(user_id)
        if not profile:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
        
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ç–µ—Å—Ç–µ
        if profile.get('test_results'):
            latest_test = profile['test_results'][-1]
            context_parts.append(
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞: {latest_test['score']}/{latest_test['total_questions']} "
                f"({latest_test['percentage']:.1f}%)"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (—Ç–µ–º—ã)
        if profile.get('weaknesses'):
            context_parts.append(f"–°–ª–∞–±—ã–µ —Ç–µ–º—ã: {', '.join(profile['weaknesses'])}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–∞–º
        if profile.get('error_patterns'):
            for topic, errors in profile['error_patterns'].items():
                if errors:
                    context_parts.append(f"–û—à–∏–±–∫–∏ –ø–æ —Ç–µ–º–µ {topic}: {', '.join(errors)}")
        
        return "\n".join(context_parts)
    
    async def generate_personalized_exercise(self, subject: str, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
        user_context = self.create_user_context(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prompt = f"""
        –°–æ–∑–¥–∞–π {subject} –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        {user_context}
        
        –°–æ–∑–¥–∞–π 5 –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–ª—É—á—à–∏—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.
        –§–æ—Ä–º–∞—Ç: —á–µ—Ç–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.
        """
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π LLM —Å–µ—Ä–≤–∏—Å —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            return await llm_service.generate_content(
                prompt_type="tutor",
                user_message=prompt,
                additional_context=f"–ì–µ–Ω–µ—Ä–∏—Ä—É–π –∑–∞–¥–∞–Ω–∏—è –ø–æ {subject}"
            )
        except Exception as e:
            logger.error(f"Error generating personalized exercise: {e}")
            return self.get_fallback_exercise(subject)
    
    def get_fallback_exercise(self, subject: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        if subject == "vocabulary":
            return """üìö –ó–∞–¥–∞–Ω–∏—è –ø–æ –ª–µ–∫—Å–∏–∫–µ:
            
1. Choose the correct phrasal verb:
   I need to ___ my notes before the exam.
   a) look up    b) look after    c) look into    d) look for

2. Complete the collocation:
   Make a ___ about your future plans.
   a) decision   b) solution   c) problem   d) opinion"""
        
        elif subject == "grammar":
            return """üìñ –ó–∞–¥–∞–Ω–∏—è –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ:
            
1. Choose the correct tense:
   By this time next year, I ___ university.
   a) will finish    b) will have finished    c) finish    d) am finishing

2. Select the right conditional:
   If I ___ more time, I would travel the world.
   a) have    b) had    c) would have    d) have had"""
        
        return "–ó–∞–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    

    

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rag_manager = SimpleRAGManager()