"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from .keyboards import create_main_keyboard
from src.llm.service import llm_service
from src.test_manager import test_manager
from src.utils.error_handling import handle_async_error
from src.rag.manager import rag_manager
from src.exercise_manager import exercise_manager
from src.utils.validators import require_test_completion

logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_chat_history = {}

def clean_markdown_text(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Markdown —Å–∏–º–≤–æ–ª–æ–≤"""
    return text.replace('*', '‚Ä¢').replace('_', '-').replace('`', '"').replace('[', '(').replace(']', ')')

def reset_exercise_session(user_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in exercise_manager.active_exercises:
        del exercise_manager.active_exercises[user_id]
    if user_id in exercise_manager.user_answers:
        del exercise_manager.user_answers[user_id]
    if hasattr(exercise_manager, 'user_current_index') and user_id in exercise_manager.user_current_index:
        del exercise_manager.user_current_index[user_id]

def add_to_chat_history(user_id: int, role: str, content: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_chat_history:
        user_chat_history[user_id] = []
    
    user_chat_history[user_id].append({"role": role, "content": content})
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(user_chat_history[user_id]) > 20:
        user_chat_history[user_id] = user_chat_history[user_id][-20:]

def get_chat_history(user_id: int) -> list:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_chat_history.get(user_id, [])

def clear_chat_history(user_id: int):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_chat_history:
        del user_chat_history[user_id]

async def show_exercise(update: Update, context: ContextTypes.DEFAULT_TYPE, exercise, exercise_index: int, total_exercises: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = []
    session_id = exercise_manager.get_short_session_id(update.effective_user.id)
    for i, option in enumerate(exercise.options):
        letter = chr(65 + i)  # A, B, C, D
        keyboard.append([InlineKeyboardButton(
            f"{letter}. {option}", 
            callback_data=f"ex:{session_id}:{exercise_index}:{letter}"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏
    if exercise_index == total_exercises - 1:
        keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="exercise_finish")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    exercise_text = f"""üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {exercise_index + 1} –∏–∑ {total_exercises}

{exercise.question}

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"""
    
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                exercise_text,
                reply_markup=reply_markup
            )
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                exercise_text,
                reply_markup=reply_markup
            )
        else:
            # Fallback –¥–ª—è –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ —Ç–∏–ø–∞ update
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=exercise_text,
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error in show_exercise: {e}")
        # Fallback - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=exercise_text,
            reply_markup=reply_markup
        )

async def show_exercise_results(update: Update, context: ContextTypes.DEFAULT_TYPE, results: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    result_text = f"""üéâ *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
{results['correct_answers']} –∏–∑ {results['total_questions']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
({results['percentage']:.1f}%)

üåü *–£—Ä–æ–≤–µ–Ω—å:* {results['level']}

üí° *–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä:*"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    for i, result in enumerate(results['results'], 1):
        status = "‚úÖ" if result['is_correct'] else "‚ùå"
        result_text += f"\n\n{i}. {status} {result['question']}"
        result_text += f"\n–í–∞—à –æ—Ç–≤–µ—Ç: {result['user_answer'] or '–ù–µ –æ—Ç–≤–µ—á–µ–Ω'}"
        result_text += f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result['correct_answer']}"
        if not result['is_correct']:
            result_text += f"\nüí° {result['explanation']}"
    
    result_text += "\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown
    clean_result = clean_markdown_text(result_text)
    
    try:
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.message.reply_text(
                clean_result,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
        elif hasattr(update, 'message') and update.message:
            await update.message.reply_text(
                clean_result,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
        else:
            # Fallback
            chat_id = update.effective_chat.id
            await context.bot.send_message(
                chat_id=chat_id,
                text=clean_result,
                parse_mode='Markdown',
                reply_markup=create_main_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in show_exercise_results: {e}")
        # Fallback –±–µ–∑ Markdown
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text=clean_result,
            reply_markup=create_main_keyboard()
        )

@handle_async_error
@require_test_completion
async def vocabulary_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Vocabulary - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é
    reset_exercise_session(user_id)
    await update.message.reply_text("üìö –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –ª–µ–∫—Å–∏–∫–µ...")
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercises = await exercise_manager.start_exercise_session(user_id, "vocabulary")
        logger.info(f"Created {len(exercises)} vocabulary exercises for user {user_id}")
        
        if not exercises:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        exercise_manager.set_current_exercise_index(user_id, 0)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        await show_exercise(update, context, exercises[0], 0, len(exercises))
        
    except Exception as e:
        logger.error(f"Error in vocabulary command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
@require_test_completion
async def grammar_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Grammar - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if exercise_manager.is_exercise_session_active(user_id):
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        reset_exercise_session(user_id)
        await update.message.reply_text("üìñ –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ...")
    else:
        await update.message.reply_text("üìñ –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ...")
    
    try:
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercises = await exercise_manager.start_exercise_session(user_id, "grammar")
        logger.info(f"Created {len(exercises)} grammar exercises for user {user_id}")
        
        if not exercises:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
        exercise_manager.set_current_exercise_index(user_id, 0)
        await show_exercise(update, context, exercises[0], 0, len(exercises))
        
    except Exception as e:
        logger.error(f"Error in grammar command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )

async def send_question(update: Update, question: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    message_text = f"‚ùì –í–æ–ø—Ä–æ—Å {question['id']}/25\n\n{question['question']}"
    
    keyboard = test_manager.create_question_keyboard(question)
    
    if hasattr(update, 'callback_query'):
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=keyboard
        )

async def show_test_results(update: Update, results: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    result_text = f"""üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*

üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:*
{results['score']} –∏–∑ {results['total_questions']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
({results['percentage']:.1f}%)

üåü *–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:*
{', '.join(results['strengths']) if results['strengths'] else '–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}

üìö *–ù–∞–¥ —á–µ–º —Å—Ç–æ–∏—Ç –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å:*
{', '.join(results['weaknesses']) if results['weaknesses'] else '–í—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
1. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Å–ª–∞–±—ã–µ —Ä–∞–∑–¥–µ–ª—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ Vocabulary –∏ Grammar
3. –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 15-20 –º–∏–Ω—É—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏!"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if hasattr(update, 'callback_query'):
        await update.callback_query.message.reply_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )
    else:
        await update.message.reply_text(
            result_text,
            parse_mode='Markdown',
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def handle_test_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ—Å—Ç–æ–º"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    action = query.data
    
    if action == "test_continue":
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç —Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        current_question = test_manager.get_current_question(user_id)
        if current_question:
            await send_question(update, current_question)
        else:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            results = test_manager.finish_test(user_id)
            await query.edit_message_text(
                "üìä –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...",
                reply_markup=None
            )
            await show_test_results(update, results)
    
    elif action == "test_restart":
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
        if user_id in test_manager.active_tests:
            del test_manager.active_tests[user_id]
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
        success = test_manager.start_test_for_user(user_id)
        if success:
            current_question = test_manager.get_current_question(user_id)
            if current_question:
                await send_question(update, current_question)
            else:
                await query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.",
                    reply_markup=create_main_keyboard()
                )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_keyboard()
            )
    
    elif action == "test_cancel":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç
        if user_id in test_manager.active_tests:
            del test_manager.active_tests[user_id]
        await query.edit_message_text(
            "‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user = update.effective_user
    welcome_text = f"""üéì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, {user.first_name}!

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É!

üìö –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
‚Ä¢ üìù Test - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ï–ì–≠ (25 –∑–∞–¥–∞–Ω–∏–π)
‚Ä¢ üìö Vocabulary - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ª–µ–∫—Å–∏–∫–∏ (5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
‚Ä¢ üìñ Grammar - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏ (5 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
‚Ä¢ üí¨ Chat - –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —á–∞—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —Å AI-–¥—Ä—É–≥–æ–º
‚Ä¢ üî• Motivate - –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ üë®‚Äçüè´ Get contact with a teacher - –°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

‚ú® –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @ezzy_breezy –¥–ª—è –ø–æ–ª–µ–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!
"""
    
    await update.message.reply_text(welcome_text, reply_markup=create_main_keyboard())

@handle_async_error
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Test - –∑–∞–ø—É—Å–∫/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
    if user_id in test_manager.active_tests:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_continue")],
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç", callback_data="test_restart")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data="test_cancel")]
        ])
        
        await update.message.reply_text(
            "üìù –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç. –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard
        )
        return
    
    # –ò–Ω–∞—á–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
    await show_test_intro(update)

async def show_test_intro(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç—É"""
    test_info = """üìù *–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É*

–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 25 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç 5 –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:

üéØ *–ì–†–ê–ú–ú–ê–¢–ò–ö–ê* (8 –≤–æ–ø—Ä–æ—Å–æ–≤)
üìù *–õ–ï–ö–°–ò–ö–ê* (8 –≤–æ–ø—Ä–æ—Å–æ–≤)  
üìñ *–ü–û–ù–ò–ú–ê–ù–ò–ï –¢–ï–ö–°–¢–ê* (4 –≤–æ–ø—Ä–æ—Å–∞)
‚úçÔ∏è *–ü–ò–°–¨–ú–û* (2 –∑–∞–¥–∞–Ω–∏—è)
üìù *–≠–°–°–ï* (3 –∑–∞–¥–∞–Ω–∏—è)

‚è∞ –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: 20-25 –º–∏–Ω—É—Ç
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏

*–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?* –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç'üëá"""
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")]
    ])
    
    if hasattr(update, 'message'):
        await update.message.reply_text(
            test_info,
            parse_mode='Markdown',
            reply_markup=keyboard
        )
    else:
        await update.callback_query.message.reply_text(
            test_info,
            parse_mode='Markdown',
            reply_markup=keyboard
        )

@handle_async_error
async def handle_test_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
    success = test_manager.start_test_for_user(user_id)
    if not success:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=create_main_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    current_question = test_manager.get_current_question(user_id)
    if current_question:
        await send_question(update, current_question)
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def handle_test_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    answer = query.data.replace("test_answer_", "")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    test_manager.process_answer(user_id, answer)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç
    if test_manager.is_test_completed(user_id):
        results = test_manager.finish_test(user_id)
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await query.edit_message_text(
            "üìä –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏...",
            reply_markup=None
        )
        await show_test_results(update, results)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = test_manager.get_current_question(user_id)
        if next_question:
            await send_question(update, next_question)

@handle_async_error
async def chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Chat - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ chat"""
    user_id = update.effective_user.id
    context.user_data['mode'] = 'chat'
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
    clear_chat_history(user_id)
    
    await update.message.reply_text(
        "üí¨ Chat with an AI Friend is ready!\n\n"
        "Now you can practice your English in a friendly and relaxed way! üé≠\n"
        "You write to me in English, and I will answer like a good friend.\n\n"
        "Some ideas for our chat:\n"
        "‚Ä¢ How was your day?\n"
        "‚Ä¢ Plans for the weekend\n"
        "‚Ä¢ Your favorite movies or books\n"
        "‚Ä¢ Your hobbies and interests\n\n"
        "Don't be shy ‚Äì let's practice your English together! üöÄ",
        reply_markup=create_main_keyboard()
    )

@handle_async_error
async def motivate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Motivate - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–ø—Ç—É"""
    await update.message.reply_text("üî• –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é —á–µ—Ä–µ–∑ LLM —Å –ø—Ä–æ–º–ø—Ç–æ–º motivate
        motivation = await llm_service.generate_content("motivate")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é
        await update.message.reply_text(
            motivation,
            reply_markup=create_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error generating motivation: {e}")
        # Fallback - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        await update.message.reply_text(
            "‚ú® –¢—ã –¥–µ–ª–∞–µ—à—å –æ—Ç–ª–∏—á–Ω—ã–µ —É—Å–ø–µ—Ö–∏! –ö–∞–∂–¥–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏! üí™\n"
            "–ù–µ —Å–¥–∞–≤–∞–π—Å—è - —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üöÄ",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def teacher_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã Teacher - —Å–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º"""
    teacher_info = """üë®‚Äçüè´ –°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º

üéì –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠:
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –†–∞–∑–±–æ—Ä –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞  
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ —Ç–µ—Å—Ç—ã

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:
‚Ä¢ Email: re.nailevna@mail.ru
‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @MellinaRina

üì¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
EAZY BREEZY | –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –ï–ì–≠ 2026
https://t.me/ezzy_breezy

üí° –ü–µ—Ä–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"""
    
    await update.message.reply_text(
        teacher_info,
        reply_markup=create_main_keyboard()
    )

@handle_async_error
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üìù Test":
        await test_command(update, context)
    elif text == "üìö Vocabulary":
        await vocabulary_command(update, context)
    elif text == "üìñ Grammar":
        await grammar_command(update, context)
    elif text == "üí¨ Chat":
        await chat_command(update, context)
    elif text == "üî• Motivate":
        await motivate_command(update, context)
    elif text == "üë®‚Äçüè´ Get contact with a teacher":
        await teacher_command(update, context)
    elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
        await reset_exercises_command(update, context)

@handle_async_error
async def reset_exercises_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    
    if exercise_manager.is_exercise_session_active(user_id):
        reset_exercise_session(user_id)
        await update.message.reply_text(
            "üîÑ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.",
            reply_markup=create_main_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def handle_exercise_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    # –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ex:{session_id6}:{index}:{letter}
    parts = query.data.split(':')
    if len(parts) != 4 or parts[0] != 'ex':
        logger.error(f"Invalid callback data: {query.data}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=create_main_keyboard()
        )
        return

    session_id = parts[1]
    idx_str = parts[2]
    answer = parts[3]
    try:
        selected_index = int(idx_str)
    except ValueError:
        logger.error(f"Invalid index in callback: {idx_str}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
            reply_markup=create_main_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞
    current_session = exercise_manager.get_short_session_id(user_id)
    if not current_session or session_id != current_session:
        logger.warning(f"Stale or invalid session in callback: {session_id} != {current_session}")
        await query.message.reply_text(
            "‚ÑπÔ∏è –≠—Ç–∞ —Å–µ—Å—Å–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.",
            reply_markup=create_main_keyboard()
        )
        return
    
    logger.info(f"User {user_id} answered exercise index {selected_index} with answer {answer}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in exercise_manager.active_exercises:
        logger.error(f"No active exercises for user {user_id}")
        await query.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.",
            reply_markup=create_main_keyboard()
        )
        return
    
    exercises = exercise_manager.active_exercises[user_id]
    # –î–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—É –∏–∑ –∫–æ–ª–ª–±—ç–∫–∞, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω
    current_index = selected_index
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if current_index >= len(exercises):
        logger.error(f"Current index {current_index} out of range for {len(exercises)} exercises")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.",
            reply_markup=create_main_keyboard()
        )
        return
    
    current_exercise = exercises[current_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    #if str(current_exercise.exercise_id) != str(exercise_id):
    #    logger.error(f"Exercise ID mismatch: current {current_exercise.exercise_id} vs callback {exercise_id}")
    #    await query.message.reply_text(
    #        "‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.",
    #        reply_markup=create_main_keyboard()
    #    )
    #    return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ID –∫–æ—Ä–æ—Ç–∫–æ: subject_user_index
    short_exercise_id = f"{current_exercise.subject}_{user_id}_{current_index}"
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É
    if user_id in exercise_manager.user_answers and short_exercise_id in exercise_manager.user_answers[user_id]:
        logger.info(f"Duplicate answer ignored for {short_exercise_id}")
        await query.answer()
        return
    try:
        exercise_manager.submit_answer(user_id, short_exercise_id, answer)
        logger.info(f"Answer submitted successfully for exercise {short_exercise_id}")
    except Exception as e:
        logger.error(f"Error submitting answer: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
            reply_markup=create_main_keyboard()
        )
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    is_correct = (answer.upper() == current_exercise.correct_answer.upper())
    status_icon = "‚úÖ" if is_correct else "‚ùå"
    
    #try:
    #    await query.edit_message_text(
    #        f"{status_icon} –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {answer.upper()}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...",
    #        reply_markup=None
    #    )
    #except Exception as e:
    #    logger.error(f"Error editing message: {e}")
    #    await query.message.reply_text(
    #        f"{status_icon} –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {answer.upper()}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É..."
    #    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω—è—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    try:
        await query.edit_message_text(
            f"–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç: {answer.upper()}",
            reply_markup=None
        )
    except Exception as e:
        logger.debug(f"Could not edit message to acknowledge answer: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
    next_index = current_index + 1
    exercise_manager.set_current_exercise_index(user_id, next_index)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    if next_index < len(exercises):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        next_exercise = exercises[next_index]
        logger.info(f"Showing next exercise {next_index}: {next_exercise.exercise_id}")
        await show_exercise(update, context, next_exercise, next_index, len(exercises))
    else:
        # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
        logger.info("Last exercise completed, finishing session")
        try:
            results = exercise_manager.finish_exercise_session(user_id)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            exercise_manager.reset_current_index(user_id)
            await show_exercise_results(update, context, results)
        except Exception as e:
            logger.error(f"Error finishing exercise session: {e}")
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.",
                reply_markup=create_main_keyboard()
            )

@handle_async_error
async def handle_exercise_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        results = exercise_manager.finish_exercise_session(user_id)
        
        if "error" in results:
            await query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.",
                reply_markup=create_main_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_exercise_results(update, context, results)
        
    except Exception as e:
        logger.error(f"Error in handle_exercise_finish: {e}")
        await query.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=create_main_keyboard()
        )

@handle_async_error
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if user_message in ["üìù Test", "üìö Vocabulary", "üìñ Grammar", "üí¨ Chat", "üî• Motivate", "üë®‚Äçüè´ Get contact with a teacher", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"]:
        await handle_buttons(update, context)
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    mode = context.user_data.get('mode', 'tutor')
    
    if mode == 'chat':
        # –†–µ–∂–∏–º —á–∞—Ç–∞ —Å AI-–¥—Ä—É–≥–æ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç chat
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_chat_history(user_id, "user", user_message)
            
            await update.message.reply_text("üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            chat_history = get_chat_history(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            context_with_history = f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n"
            for msg in chat_history[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                context_with_history += f"{msg['role']}: {msg['content']}\n"
            context_with_history += f"\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            
            response = await llm_service.generate_content("chat", context_with_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_chat_history(user_id, "assistant", response)
            
            await update.message.reply_text(response, reply_markup=create_main_keyboard())
        except Exception as e:
            logger.error(f"Error in chat mode: {e}")
            await update.message.reply_text(
                "üòä Nice to chat with you! How was your day?",
                reply_markup=create_main_keyboard()
            )
    else:
        # –†–µ–∂–∏–º –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–ø—Ç tutor
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_chat_history(user_id, "user", user_message)
            
            await update.message.reply_text("ü§î –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            chat_history = get_chat_history(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            context_with_history = f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:\n"
            for msg in chat_history[:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                context_with_history += f"{msg['role']}: {msg['content']}\n"
            context_with_history += f"\n–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
            
            response = await llm_service.generate_content("tutor", context_with_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_to_chat_history(user_id, "assistant", response)
            
            await update.message.reply_text(response, reply_markup=create_main_keyboard())
        except Exception as e:
            logger.error(f"Error in tutor mode: {e}")
            await update.message.reply_text(
                "üìö –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É!\n"
                "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ, –ª–µ–∫—Å–∏–∫–µ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —ç–∫–∑–∞–º–µ–Ω–∞.\n\n"
                "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é üëÜ",
                reply_markup=create_main_keyboard()
            )

def setup_handlers(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(
        filters.Text([
            "üìù Test", "üìö Vocabulary", "üìñ Grammar", 
            "üí¨ Chat", "üî• Motivate", "üë®‚Äçüè´ Get contact with a teacher",
            "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"
        ]), 
        handle_buttons
    ))
    
    # –°–ù–ê–ß–ê–õ–ê –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ)
    application.add_handler(CallbackQueryHandler(handle_exercise_answer, pattern="^ex:"))
    application.add_handler(CallbackQueryHandler(handle_exercise_finish, pattern="^exercise_finish$"))
    
    # –ü–û–¢–û–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ—Å—Ç–∞
    application.add_handler(CallbackQueryHandler(handle_test_start, pattern="^start_test$"))
    application.add_handler(CallbackQueryHandler(handle_test_actions, pattern="^test_(continue|restart|cancel)$"))
    application.add_handler(CallbackQueryHandler(handle_test_answer, pattern="^test_answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_message
    ))
    
    logger.info("‚úÖ All handlers registered successfully")